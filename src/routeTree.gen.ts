/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'

// Create Virtual Routes

const IndexLazyImport = createFileRoute('/')()
const PropsIndexLazyImport = createFileRoute('/props/')()
const ListsIndexLazyImport = createFileRoute('/lists/')()
const JsxIndexLazyImport = createFileRoute('/jsx/')()
const InitialIndexLazyImport = createFileRoute('/initial/')()
const FormsIndexLazyImport = createFileRoute('/forms/')()
const EventsIndexLazyImport = createFileRoute('/events/')()
const EnvironmentIndexLazyImport = createFileRoute('/environment/')()
const ConditionalIndexLazyImport = createFileRoute('/conditional/')()
const ComponentsIndexLazyImport = createFileRoute('/components/')()
const AboutIndexLazyImport = createFileRoute('/about/')()

// Create/Update Routes

const IndexLazyRoute = IndexLazyImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const PropsIndexLazyRoute = PropsIndexLazyImport.update({
  path: '/props/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/props/index.lazy').then((d) => d.Route))

const ListsIndexLazyRoute = ListsIndexLazyImport.update({
  path: '/lists/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/lists/index.lazy').then((d) => d.Route))

const JsxIndexLazyRoute = JsxIndexLazyImport.update({
  path: '/jsx/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/jsx/index.lazy').then((d) => d.Route))

const InitialIndexLazyRoute = InitialIndexLazyImport.update({
  path: '/initial/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/initial/index.lazy').then((d) => d.Route))

const FormsIndexLazyRoute = FormsIndexLazyImport.update({
  path: '/forms/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/forms/index.lazy').then((d) => d.Route))

const EventsIndexLazyRoute = EventsIndexLazyImport.update({
  path: '/events/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/events/index.lazy').then((d) => d.Route))

const EnvironmentIndexLazyRoute = EnvironmentIndexLazyImport.update({
  path: '/environment/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/environment/index.lazy').then((d) => d.Route),
)

const ConditionalIndexLazyRoute = ConditionalIndexLazyImport.update({
  path: '/conditional/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/conditional/index.lazy').then((d) => d.Route),
)

const ComponentsIndexLazyRoute = ComponentsIndexLazyImport.update({
  path: '/components/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/components/index.lazy').then((d) => d.Route),
)

const AboutIndexLazyRoute = AboutIndexLazyImport.update({
  path: '/about/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/about/index.lazy').then((d) => d.Route))

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/about/': {
      preLoaderRoute: typeof AboutIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/components/': {
      preLoaderRoute: typeof ComponentsIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/conditional/': {
      preLoaderRoute: typeof ConditionalIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/environment/': {
      preLoaderRoute: typeof EnvironmentIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/events/': {
      preLoaderRoute: typeof EventsIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/forms/': {
      preLoaderRoute: typeof FormsIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/initial/': {
      preLoaderRoute: typeof InitialIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/jsx/': {
      preLoaderRoute: typeof JsxIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/lists/': {
      preLoaderRoute: typeof ListsIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/props/': {
      preLoaderRoute: typeof PropsIndexLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren([
  IndexLazyRoute,
  AboutIndexLazyRoute,
  ComponentsIndexLazyRoute,
  ConditionalIndexLazyRoute,
  EnvironmentIndexLazyRoute,
  EventsIndexLazyRoute,
  FormsIndexLazyRoute,
  InitialIndexLazyRoute,
  JsxIndexLazyRoute,
  ListsIndexLazyRoute,
  PropsIndexLazyRoute,
])

/* prettier-ignore-end */
